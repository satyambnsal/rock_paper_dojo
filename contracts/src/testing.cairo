#[cfg(test)]
mod tests {
    use core::option::OptionTrait;
    use starknet::class_hash::Felt252TryIntoClassHash;
    use starknet::{ContractAddress};
    use debug::PrintTrait;

    // import world dispatcher

    use dojo::world::{IWorldDispatcher, IWorldDispatcherTrait};
    use dojo::test_utils::{spawn_test_world, deploy_contract};

    // import model structs
    // the lowercase structs hashes generated by the compiler

    use rock_paper::models::{
        position, player_at_position, rps_type, energy, player_id, player_address, Position,
        PlayerAtPosition, RPSType, Energy, Direction, Vec2, PlayerID, PlayerAddress
    };

    use rock_paper::actions::actions;

    use rock_paper::interface::{IActions, IActionsDispatcher, IActionsDispatcherTrait};

    // import config
    use rock_paper::config::{INITIAL_ENERGY, RENEWED_ENERGY, MOVE_ENERGY_COST};


    // Note: Spawn world helper function
    // 1. deploys world contract
    // 2. deploys actions contract
    // 3. sets models within world
    // 4. Returns caller, world dispatcher and actions dispatcher for use in testing
    fn spawn_world() -> (ContractAddress, IWorldDispatcher, IActionsDispatcher) {
        let caller = starknet::contract_address_const::<'satyam'>();
        starknet::testing::set_caller_address(caller);
        starknet::testing::set_contract_address(caller);

        let mut models = array![
            player_at_position::TEST_CLASS_HASH,
            position::TEST_CLASS_HASH,
            energy::TEST_CLASS_HASH,
            rps_type::TEST_CLASS_HASH,
            player_id::TEST_CLASS_HASH,
            player_address::TEST_CLASS_HASH
        ];

        let world = spawn_test_world(models);

        let contract_address = world
            .deploy_contract('actions', actions::TEST_CLASS_HASH.try_into().unwrap());

        (caller, world, IActionsDispatcher { contract_address })
    }

    #[test]
    #[available_gas(20000000000)]
    fn spawn_test() {
        let (caller, world, actions_) = spawn_world();
        actions_.spawn('r');
        let player_id = get!(world, caller, (PlayerID)).player_id;
        assert(1 == player_id, 'incorrect id');

        // Get player from id
        let (position, rps_type, energy) = get!(world, player_id, (Position, RPSType, Energy));
        assert(position.x > 0, 'incorrect position.x');
        assert(position.y > 0, 'incorrect position.y');
        assert('r' == rps_type.rps, 'incorrect rps');
        assert(energy.amt == INITIAL_ENERGY, 'incorrect enegery');
    }
}
